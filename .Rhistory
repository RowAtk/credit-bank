install.packages("dplyr")
install.packages("magrittr")
hist(sch.data$age)
rm(list = ls())
# Load Data
# sch.data <- read.csv(file = file.choose(), stringsAsFactors = TRUE, header = TRUE, sep = ",")
sch.data <- read.csv(file = "cohort2020-set-a.csv", stringsAsFactors = TRUE, header = TRUE, sep = ',', na.strings = c("", "NA"))
# Explore Data
View(sch.data)
nrow(sch.data[!complete.cases(sch.data),])
# 1 A
summary(sch.data)
hist(as.numeric(as.character(sch.data$job)))
hist(sch.data$age)
hist(sch.data$duration)
hist(sch.data$deposit)
hist(sch.data$balance)
# Fix missing values
sch.data$contact = NULL # get rid of contact was useless
sch.data$RefNum = NULL
# Job
levels(sch.data$job) <- c(levels(sch.data$job), "other")
sch.data$job[is.na(sch.data$job)] <- "other"
# Education - primary: 1, secondary: 2, tertiary: 3
levels(sch.data$education)
sch.data$education <- as.integer(as.factor(sch.data$education))
sch.data$education[is.na(sch.data$education)] <- 0
# Housing
# yes - housing_y, no - houing_n
levels(sch.data$housing)
#sch.data$housing_y <- sch.data$housing[sch.data$housing == 'yes']
sch.data = sch.data[!is.na(sch.data$housing),] # remove rows with N/A in housing
sch.data$housing_y[sch.data$housing == 'yes'] = 1
sch.data$housing_y[is.na(sch.data$housing_y)] = 0
sch.data$housing_n[sch.data$housing == 'no'] = 1
sch.data$housing_n[is.na(sch.data$housing_n)] = 0
# Loan
sch.data = sch.data[!is.na(sch.data$loan),] # remove rows with N/A in loan
sch.data$loan_y[sch.data$loan == 'yes'] = 1
sch.data$loan_y[is.na(sch.data$loan_y)] = 0
sch.data$loan_n[sch.data$loan == 'no'] = 1
sch.data$loan_n[is.na(sch.data$loan_n)] = 0
#day
# no missing values
# month
summary(sch.data$month)
levels(sch.data$month)
hist(as.numeric(as.factor(sch.data$month)))
sch.data$month <- match(as.factor(sch.data$month), tolower(month.name))
# Duration
# no missing values
#Deposit
hist(sch.data$deposit)
boxplot(sch.data$deposit)
#length(sch.data$job[sch.data$deposit > 49000 & !is.na(sch.data$deposit)])
sch.data$deposit[is.na(sch.data$deposit)] = median(sch.data$deposit[!is.na(sch.data$deposit)])
# deposit_N =
# IW = (minimum(sch.data$deposit) - maximum(sch.data$deposit)) / deposit_N
# END OF MISSING VALUES
nrow(sch.data[!complete.cases(sch.data),])
#Question
# Question 5
# Day: 5
# Month: 3
# Today: 26/4
# Answer: 52 days
hist(sch.data$age)
sch.data$age[sch.data$age > 60]
maximum(sch.data$age)
max(sch.data$age)
1138/5
1138/2
1142/8
1142/6
1142/4
1142/9
1142/7
round(1138/5)
bin_freq = round(1138/n)
n = 20
bin_freq = round(1138/n)
bin_freq
n = 32
bin_freq = round(1138/n)
print(bin_freq)
1138 % 228
1138 @ 228
1138 && 228
1138 || 228
1138 // 228
1138 / 228
228*4
1138 - 912
= 3
bin_freq = round(1138/n)
print(bin_freq)
n = 3
bin_freq = round(1138/n)
print(bin_freq)
ages = sch.data$age
sort(ages)
ages
ages = sch.data$age
ages = sort(ages)
ages
ages = sort(sch.data$age)
ages
View(ages)
class(ages)
is.vactor(ages)
is.vector(ages)
copy.data = sch.data
rbin_equal_freq(data = copy.data, response = NULL, predictor = copy.data$age,
bins = 10)
install.packages("rbin")
library(rbin)
install.packages("rbin")
library(rbin)
install.packages("classInt")
library(classInt)
ages = sch.data$age
classIntervals(ages, 4)
x <- classIntervals(dataset, 4, style = 'equal')
x <- classIntervals(ages, 4, style = 'equal')
x
# width
library(classInt)
ages = sch.data$age
w <- classIntervals(ages, 3, style = 'quantile')
x <- classIntervals(ages, 3, style = 'equal')
w
x
x
x
x
x
x
x
# frequency
f <- classIntervals(ages, 6, style = 'quantile')
f
class(f)
# frequency
f <- classIntervals(ages, 12, style = 'quantile')
f
# frequency
f <- classIntervals(ages, 3, style = 'quantile')
f
copy.data = sch.data
View(data.frame(old_age=sch.data$age, new_age=copy.data$age)
copy.data = sch.data
copy.data$age = ages
View(data.frame(old_age=sch.data$age, new_age=copy.data$age)
View(data.frame(old_age=sch.data$age, new_age=copy.data$age)
copy.data = sch.data
copy.data$age = ages
View(data.frame(old_age=sch.data$age, new_age=copy.data$age))
rm(list = ls())
# Load Data
# sch.data <- read.csv(file = file.choose(), stringsAsFactors = TRUE, header = TRUE, sep = ",")
sch.data <- read.csv(file = "cohort2020-set-a.csv", stringsAsFactors = TRUE, header = TRUE, sep = ',', na.strings = c("", "NA"))
# Explore Data
View(sch.data)
nrow(sch.data[!complete.cases(sch.data),])
# 1 A
summary(sch.data)
hist(as.numeric(as.character(sch.data$job)))
hist(sch.data$age)
hist(sch.data$duration)
hist(sch.data$deposit)
hist(sch.data$balance)
# Fix missing values
sch.data$contact = NULL # get rid of contact was useless
sch.data$RefNum = NULL
# Job
levels(sch.data$job) <- c(levels(sch.data$job), "other")
sch.data$job[is.na(sch.data$job)] <- "other"
# Education - primary: 1, secondary: 2, tertiary: 3
levels(sch.data$education)
sch.data$education <- as.integer(as.factor(sch.data$education))
sch.data$education[is.na(sch.data$education)] <- 0
# Housing
# yes - housing_y, no - houing_n
levels(sch.data$housing)
#sch.data$housing_y <- sch.data$housing[sch.data$housing == 'yes']
sch.data = sch.data[!is.na(sch.data$housing),] # remove rows with N/A in housing
sch.data$housing_y[sch.data$housing == 'yes'] = 1
sch.data$housing_y[is.na(sch.data$housing_y)] = 0
sch.data$housing_n[sch.data$housing == 'no'] = 1
sch.data$housing_n[is.na(sch.data$housing_n)] = 0
# Loan
sch.data = sch.data[!is.na(sch.data$loan),] # remove rows with N/A in loan
sch.data$loan_y[sch.data$loan == 'yes'] = 1
sch.data$loan_y[is.na(sch.data$loan_y)] = 0
sch.data$loan_n[sch.data$loan == 'no'] = 1
sch.data$loan_n[is.na(sch.data$loan_n)] = 0
#day
# no missing values
# month
summary(sch.data$month)
levels(sch.data$month)
hist(as.numeric(as.factor(sch.data$month)))
sch.data$month <- match(as.factor(sch.data$month), tolower(month.name))
# Duration
# no missing values
#Deposit
hist(sch.data$deposit)
boxplot(sch.data$deposit)
#length(sch.data$job[sch.data$deposit > 49000 & !is.na(sch.data$deposit)])
sch.data$deposit[is.na(sch.data$deposit)] = median(sch.data$deposit[!is.na(sch.data$deposit)])
# deposit_N =
# IW = (minimum(sch.data$deposit) - maximum(sch.data$deposit)) / deposit_N
# END OF MISSING VALUES
nrow(sch.data[!complete.cases(sch.data),])
#Question
# Question 5
# Day: 5
# Month: 3
# Today: 26/4
# Answer: 52 days
library(classInt)
ages = sch.data$age
# frequency
f <- classIntervals(ages, 3, style = 'quantile')
copy.data = sch.data
copy.data$age = f
View(data.frame(old_age=sch.data$age, new_age=copy.data$age))
help("classIntervals")
f[1]
View(f)
f[2]
f
f[0:376]
f
f[1][0:376]
f
packrat::init(options = list(auto.snapshot = TRUE))
install.packages("classInt")
rm(list = ls())
rm(list = ls())
# Load Data
# sch.data <- read.csv(file = file.choose(), stringsAsFactors = TRUE, header = TRUE, sep = ",")
sch.data <- read.csv(file = "cohort2020-set-a.csv", stringsAsFactors = TRUE, header = TRUE, sep = ',', na.strings = c("", "NA"))
# Explore Data
View(sch.data)
nrow(sch.data[!complete.cases(sch.data),])
# 1 A
summary(sch.data)
hist(as.numeric(as.character(sch.data$job)))
hist(sch.data$age)
hist(sch.data$duration)
hist(sch.data$deposit)
hist(sch.data$balance)
# Fix missing values
sch.data$contact = NULL # get rid of contact was useless
sch.data$RefNum = NULL
# Job
levels(sch.data$job) <- c(levels(sch.data$job), "other")
sch.data$job[is.na(sch.data$job)] <- "other"
# Education - primary: 1, secondary: 2, tertiary: 3
levels(sch.data$education)
sch.data$education <- as.integer(as.factor(sch.data$education))
sch.data$education[is.na(sch.data$education)] <- 0
# Housing
# yes - housing_y, no - houing_n
levels(sch.data$housing)
#sch.data$housing_y <- sch.data$housing[sch.data$housing == 'yes']
sch.data = sch.data[!is.na(sch.data$housing),] # remove rows with N/A in housing
sch.data$housing_y[sch.data$housing == 'yes'] = 1
sch.data$housing_y[is.na(sch.data$housing_y)] = 0
sch.data$housing_n[sch.data$housing == 'no'] = 1
sch.data$housing_n[is.na(sch.data$housing_n)] = 0
# Loan
sch.data = sch.data[!is.na(sch.data$loan),] # remove rows with N/A in loan
sch.data$loan_y[sch.data$loan == 'yes'] = 1
sch.data$loan_y[is.na(sch.data$loan_y)] = 0
sch.data$loan_n[sch.data$loan == 'no'] = 1
sch.data$loan_n[is.na(sch.data$loan_n)] = 0
#day
# no missing values
# month
summary(sch.data$month)
levels(sch.data$month)
hist(as.numeric(as.factor(sch.data$month)))
sch.data$month <- match(as.factor(sch.data$month), tolower(month.name))
# Duration
# no missing values
#Deposit
hist(sch.data$deposit)
boxplot(sch.data$deposit)
#length(sch.data$job[sch.data$deposit > 49000 & !is.na(sch.data$deposit)])
sch.data$deposit[is.na(sch.data$deposit)] = median(sch.data$deposit[!is.na(sch.data$deposit)])
# deposit_N =
# IW = (minimum(sch.data$deposit) - maximum(sch.data$deposit)) / deposit_N
# END OF MISSING VALUES
nrow(sch.data[!complete.cases(sch.data),])
#Question
# Question 5
# Day: 5
# Month: 3
# Today: 26/4
# Answer: 52 days
library(classInt)
library(lubridate)
# Load Data
# sch.data <- read.csv(file = file.choose(), stringsAsFactors = TRUE, header = TRUE, sep = ",")
sch.data <- read.csv(file = "cohort2020-set-a.csv", stringsAsFactors = TRUE, header = TRUE, sep = ',', na.strings = c("", "NA"))
# 1 A
summary(sch.data)
nrow(sch.data[!complete.cases(sch.data),])
# Age
boxplot(sch.data$age)
hist(sch.data$age)
# Job
hist(sch.data$job)
# Job
hist(as.numeric(sch.data$job))
levels(sch.data$job)
levels(sch.data$job) <- c(levels(sch.data$job), "other") # add 'other' as possible value
sch.data$job[is.na(sch.data$job)] <- "other"
summary(sch.data)
levels(sch.data$job)
# Job
hist(as.numeric(sch.data$job))
# Job
hist(as.numeric(as.character(sch.data$job)))
# Job
barplot(summary(sch.data$job))
# Job
barplot(summary(sch.data$job), las=2)
# Load Data
# sch.data <- read.csv(file = file.choose(), stringsAsFactors = TRUE, header = TRUE, sep = ",")
sch.data <- read.csv(file = "cohort2020-set-a.csv", stringsAsFactors = TRUE, header = TRUE, sep = ',', na.strings = c("", "NA"))
# Job
barplot(summary(sch.data$job), las=2)
summary(sch.data)
# Education - primary: 1, secondary: 2, tertiary: 3
levels(sch.data$education)
#day
# no missing values
# outliers - dates that do not exist / are not possible Eg Feb 30, 2019
sch.data$day[sch.data$day > 29 & sch.data$month == 2] = 28
today = Sys.Date()
sch.data$deposit_date <- mdy(paste(sch.data$month, sch.data$day, "2019", sep = "-"))
library(lubridate)
sch.data$deposit_date <- mdy(paste(sch.data$month, sch.data$day, "2019", sep = "-"))
View(sch.data[c("day", "month"), sch.data$day > 28])
sch.data[, sch.data$day > 28]
sch.data[sch.data$day > 28,]
sch.data[sch.data$day > 28, c("day", "month")]
View(sch.data[sch.data$day > 28, c("day", "month")])
View(sch.data[sch.data$day > 30, c("day", "month")])
View(sch.data[sch.data$day > 28 & sch.data$month == 2, c("day", "month")])
sch.data$deposit_date <- mdy(paste(sch.data$month, sch.data$day, "2019", sep = "-"))
summary(sch.data$month)
sch.data$month <- match(as.factor(sch.data$month), tolower(month.name))
View(sch.data[, sch.data$day > 28])
View(sch.data[sch.data$day > 28 & sch.data$month == 2, c("day", "month")])
#day
# no missing values
# outliers - dates that do not exist / are not possible Eg Feb 30, 2019
View(sch.data[sch.data$day > 28, c("day", "month")])
#day
# no missing values
# outliers - dates that do not exist / are not possible Eg Feb 30, 2019
View(sch.data[sch.data$day > 30, c("day", "month")])
View(sch.data[days_in_month(sch.data$month)  > sch.data$day, c("day", "month")])
View(sch.data[days_in_month(sch.data$month)  < sch.data$day, c("day", "month")])
hist(as.numeric(as.factor(sch.data$month)))
summary(sch.data)
sch.data$day[sch.data$day > 28 & sch.data$month == 2] = 28 # fix noisy dates
#Deposit
hist(sch.data$deposit)
boxplot(sch.data$deposit)
summary(sch.data$deposit)
#Deposit
hist(sch.data$deposit)
nrow(sch.data[sch.data$deposit > 2 * 10 ^ 5])
nrow(sch.data[sch.data$deposit > 2 * 10 ^ 5, ])
nrow(sch.data[sch.data$deposit > 2 * 10 ^ 5], )
nrow(sch.data[sch.data$deposit > 2 * 10 ^ 5,] )
rownames(sch.data[sch.data$deposit > 2 * 10 ^ 5,] )
View(sch.data[sch.data$deposit > 2 * 10 ^ 5,])
options(scipen = 100, digits = 22)
View(sch.data[sch.data$deposit > 2 * 10 ^ 5,])
rownames(sch.data[sch.data$deposit > 2 * 10 ^ 5,] )
View(sch.data[sch.data$deposit > 2 * 10 ^ 5,])
boxplot(sch.data$deposit)
# balance
boxplot(sch.data$balance)
# END OF MISSING VALUES
nrow(sch.data[!complete.cases(sch.data),])
# Load Data
# sch.data <- read.csv(file = file.choose(), stringsAsFactors = TRUE, header = TRUE, sep = ",")
sch.data <- read.csv(file = "cohort2020-set-a.csv", stringsAsFactors = TRUE, header = TRUE, sep = ',', na.strings = c("", "NA"))
# Explore Data
View(sch.data)
nrow(sch.data[!complete.cases(sch.data),])
summary(sch.data)
options(op)
options()
options()
rm(list = ls())
# Load Data
# sch.data <- read.csv(file = file.choose(), stringsAsFactors = TRUE, header = TRUE, sep = ",")
sch.data <- read.csv(file = "cohort2020-set-a.csv", stringsAsFactors = TRUE, header = TRUE, sep = ',', na.strings = c("", "NA"))
summary(sch.data)
rm(list = ls())
