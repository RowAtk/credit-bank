hist(as.numeric(sch.data$job))
levels(sch.data$job)
levels(sch.data$job) <- c(levels(sch.data$job), "other") # add 'other' as possible value
sch.data$job[is.na(sch.data$job)] <- "other"
summary(sch.data)
levels(sch.data$job)
# Job
hist(as.numeric(sch.data$job))
# Job
hist(as.numeric(as.character(sch.data$job)))
# Job
barplot(summary(sch.data$job))
# Job
barplot(summary(sch.data$job), las=2)
# Load Data
# sch.data <- read.csv(file = file.choose(), stringsAsFactors = TRUE, header = TRUE, sep = ",")
sch.data <- read.csv(file = "cohort2020-set-a.csv", stringsAsFactors = TRUE, header = TRUE, sep = ',', na.strings = c("", "NA"))
# Job
barplot(summary(sch.data$job), las=2)
summary(sch.data)
# Education - primary: 1, secondary: 2, tertiary: 3
levels(sch.data$education)
#day
# no missing values
# outliers - dates that do not exist / are not possible Eg Feb 30, 2019
sch.data$day[sch.data$day > 29 & sch.data$month == 2] = 28
today = Sys.Date()
sch.data$deposit_date <- mdy(paste(sch.data$month, sch.data$day, "2019", sep = "-"))
library(lubridate)
sch.data$deposit_date <- mdy(paste(sch.data$month, sch.data$day, "2019", sep = "-"))
View(sch.data[c("day", "month"), sch.data$day > 28])
sch.data[, sch.data$day > 28]
sch.data[sch.data$day > 28,]
sch.data[sch.data$day > 28, c("day", "month")]
View(sch.data[sch.data$day > 28, c("day", "month")])
View(sch.data[sch.data$day > 30, c("day", "month")])
View(sch.data[sch.data$day > 28 & sch.data$month == 2, c("day", "month")])
sch.data$deposit_date <- mdy(paste(sch.data$month, sch.data$day, "2019", sep = "-"))
summary(sch.data$month)
sch.data$month <- match(as.factor(sch.data$month), tolower(month.name))
View(sch.data[, sch.data$day > 28])
View(sch.data[sch.data$day > 28 & sch.data$month == 2, c("day", "month")])
#day
# no missing values
# outliers - dates that do not exist / are not possible Eg Feb 30, 2019
View(sch.data[sch.data$day > 28, c("day", "month")])
#day
# no missing values
# outliers - dates that do not exist / are not possible Eg Feb 30, 2019
View(sch.data[sch.data$day > 30, c("day", "month")])
View(sch.data[days_in_month(sch.data$month)  > sch.data$day, c("day", "month")])
View(sch.data[days_in_month(sch.data$month)  < sch.data$day, c("day", "month")])
hist(as.numeric(as.factor(sch.data$month)))
summary(sch.data)
sch.data$day[sch.data$day > 28 & sch.data$month == 2] = 28 # fix noisy dates
#Deposit
hist(sch.data$deposit)
boxplot(sch.data$deposit)
summary(sch.data$deposit)
#Deposit
hist(sch.data$deposit)
nrow(sch.data[sch.data$deposit > 2 * 10 ^ 5])
nrow(sch.data[sch.data$deposit > 2 * 10 ^ 5, ])
nrow(sch.data[sch.data$deposit > 2 * 10 ^ 5], )
nrow(sch.data[sch.data$deposit > 2 * 10 ^ 5,] )
rownames(sch.data[sch.data$deposit > 2 * 10 ^ 5,] )
View(sch.data[sch.data$deposit > 2 * 10 ^ 5,])
options(scipen = 100, digits = 22)
View(sch.data[sch.data$deposit > 2 * 10 ^ 5,])
rownames(sch.data[sch.data$deposit > 2 * 10 ^ 5,] )
View(sch.data[sch.data$deposit > 2 * 10 ^ 5,])
boxplot(sch.data$deposit)
# balance
boxplot(sch.data$balance)
# END OF MISSING VALUES
nrow(sch.data[!complete.cases(sch.data),])
# Load Data
# sch.data <- read.csv(file = file.choose(), stringsAsFactors = TRUE, header = TRUE, sep = ",")
sch.data <- read.csv(file = "cohort2020-set-a.csv", stringsAsFactors = TRUE, header = TRUE, sep = ',', na.strings = c("", "NA"))
# Explore Data
View(sch.data)
nrow(sch.data[!complete.cases(sch.data),])
summary(sch.data)
options(op)
options()
options()
rm(list = ls())
# Load Data
# sch.data <- read.csv(file = file.choose(), stringsAsFactors = TRUE, header = TRUE, sep = ",")
sch.data <- read.csv(file = "cohort2020-set-a.csv", stringsAsFactors = TRUE, header = TRUE, sep = ',', na.strings = c("", "NA"))
summary(sch.data)
rm(list = ls())
corrplot(cor(dep_bal), method = "color", order = "AOE", tl.col = "black", tl.cex = 0.8, addCoef.col = :"black")
corrplot(cor(dep_bal), method = "color", order = "AOE", tl.col = "black", tl.cex = 0.8, addCoef.col = "black")
library(corrplot)
rm(list = ls())
op <- options()
# Load Data
# sch.data <- read.csv(file = file.choose(), stringsAsFactors = TRUE, header = TRUE, sep = ",")
sch.data <- read.csv(file = "cohort2020-set-a.csv", stringsAsFactors = TRUE, header = TRUE, sep = ',', na.strings = c("", "NA"))
# Explore Data
View(sch.data)
nrow(sch.data[!complete.cases(sch.data),])
summary(sch.data)
# -----  ---- #
# ----- Fix missing values ----- #
# RefNum
sch.data$RefNum = NULL # no use for reference number
# Age
boxplot(sch.data$age)
hist(sch.data$age)
# Job
#barplot(summary(sch.data$job), las=2) # plot graph to identify outliers or noise
#levels(sch.data$job) <- c(levels(sch.data$job), "other") # add 'other' as possible value
#sch.data$job[is.na(sch.data$job)] <- "other"
sch.data = sch.data[!is.na(sch.data$job),]
summary(sch.data[!is.na(sch.data$job),])
# marital
# Education - primary: 1, secondary: 2, tertiary: 3
levels(sch.data$education)
sch.data$education <- as.integer(as.factor(sch.data$education))
sch.data = sch.data[!is.na(sch.data$education),]
summary(sch.data[!is.na(sch.data$education),])
# Contact
sch.data$contact = NULL # no use for contact feature which was mostly empty
# Housing
# yes - housing_y, no - houing_n
levels(sch.data$housing)
sch.data = sch.data[!is.na(sch.data$housing),] # remove rows with N/A in housing
lst <- sch.data$housing
lvl <- levels(lst)
new_housing = setNames(data.frame(do.call(rbind,lapply(lst, function(x) as.integer(lvl %in% x)) )), c("housing_n", "housing_y"))
View(data.frame(old=sch.data$housing, new=new_housing))
sch.data = cbind(sch.data, new_housing)
# Loan
sch.data = sch.data[!is.na(sch.data$loan),] # remove rows with N/A in loan
lst <- sch.data$loan
lvl <- levels(lst)
new_loan = setNames(data.frame(do.call(rbind,lapply(lst, function(x) as.integer(lvl %in% x)) )), c("loan_n", "loan_y"))
View(data.frame(old=sch.data$loan, new=new_loan))
sch.data = cbind(sch.data, new_loan)
# month
# no missing values
#summary(sch.data$month)
levels(sch.data$month)
#hist(as.numeric(as.factor(sch.data$month)))
sch.data$month <- match(as.factor(sch.data$month), tolower(month.name))
#day
# no missing values
# outliers - dates that do not exist / are not possible Eg Feb 30, 2019
library(lubridate)
#View(sch.data[days_in_month(sch.data$month)  < sch.data$day, c("day", "month")]) # view all noisy dates
sch.data$day[sch.data$day > 28 & sch.data$month == 2] = 28 # fix noisy dates
# Duration
# no missing values
hist(sch.data$duration)
boxplot(sch.data$duration)
# Deposit
# contains outliers and missing values. Outliers were left alone missing values replaced with median
hist(sch.data$deposit)
boxplot(sch.data$deposit)
View(sch.data[sch.data$deposit > 2 * 10 ^ 5,])
length(sch.data$job[sch.data$deposit > 49000 & !is.na(sch.data$deposit)])
sch.data$deposit[is.na(sch.data$deposit)] = median(sch.data$deposit[!is.na(sch.data$deposit)])
# balance
# contains outliers... not sure what to do with them ... left them alone
boxplot(sch.data$balance)
# tried to do some analysis to figure out if the outliers have any meaning or not
# by comparing deposits and balances
#dep_bal = sch.data[sch.data$deposit > 30000, c("deposit", "balance")]
#dep_bal_ratio = (dep_bal$deposit / dep_bal$balance) * 100
#View(dep_bal_ratio)
# END OF MISSING VALUES
nrow(sch.data[!complete.cases(sch.data),])
# Question 2
# convert duration from seconds to minutes (60s -> 1 min)
# 3.20
minutes = function (seconds) {
period = seconds_to_period(sch.data$duration)
return(minute(period) + 0.01 * second(period))
}
sch.data$duration = minutes(sch.data$duration)
# Proof
# new_duration = minutes(sch.data$duration)
# View(data.frame(old=sch.data$duration, new=new_duration))
hist(sch.data$age)
boxplot(sch.data$age)
bins <- 4
abs.max <- max(sch.data$age)
abs.min <- min(sch.data$age)
new.max <- abs.max + bins
width <- (new.max - abs.min) / bins
age.temp = cut(sch.data$age, breaks = seq(abs.min, new.max, width), labels = c("Young Adult","Adults", "Mid-life", "Elderly"), right = FALSE)
sch.data$age <- age.temp
# deposit normalization
deposit.min <- min(sch.data$deposit)
deposit.max <- max(sch.data$deposit)
deposit.norm <- ((sch.data[, "deposit"] - deposit.min) / (deposit.max - deposit.min)) * ((100 - 1) + 1)
deposit.norm <- round(deposit.norm, digits = 2)
summary(deposit.norm)
sch.data$deposit <- deposit.norm
# balance normalization
balance.min <- min(sch.data$balance)
balance.max <- max(sch.data$balance)
balance.norm <- ((sch.data[, "balance"] - balance.min) / (balance.max - balance.min)) * ((100 - 1) + 1)
balance.norm <- round(balance.norm, digits = 2)
summary(balance.norm)
sch.data$balance <- balance.norm
# make a date string
#string = paste(5, 3, year(today), sep = "-")
# make a date
#something <- mdy(paste(5, 3, year(today), sep = "-"))
sch.data$deposit_date <- mdy(paste(sch.data$month, sch.data$day, "2019", sep = "-"))
# temp <- today() - sch.data$deposit_date[1]
sch.data$last_deposit <- today() - sch.data$deposit_date
#END
dep_bal = sch.data[, c("deposit", "balance")]
dep_bal.cor = cor(dep_bal$balance, dep_bal$deposit)
library(corrplot)
corrplot(cor(dep_bal), method = "color")
corrplot(cor(dep_bal), method = "color", order = "AOE", tl.col = "black", tl.cex = 0.8, addCoef.col = "black")
corrplot(cor(dep_bal), method = "color", order = "AOE", tl.col = "black", tl.cex = 0.8, addCoef.col = "white")
corrplot(cor(dep_bal), method = "color", order = "AOE", tl.col = "black", tl.cex = 0.5, addCoef.col = "white")
corrplot(cor(dep_bal), method = "color", order = "AOE", tl.col = "black", tl.cex = 0.9, addCoef.col = "white")
corrplot(cor(dep_bal), method = "color", order = "AOE", tl.col = "black", tl.cex = 3, addCoef.col = "white")
0.9
corrplot(cor(dep_bal), method = "color", order = "AOE", tl.col = "black", tl.cex = 0.9, addCoef.col = "white")
corrplot(cor(dep_bal), method = "color", order = "AOE", tl.col = "black", tl.cex = 1, addCoef.col = "white")
corrplot(cor(dep_bal, method = "kendall"), method = "color", order = "AOE", tl.col = "black", tl.cex = 1, addCoef.col = "white")
corrplot(cor(dep_bal, method = "pearson"), method = "color", order = "AOE", tl.col = "black", tl.cex = 1, addCoef.col = "white")
corrplot(cor(dep_bal, method = "kendall"), method = "color", order = "AOE", tl.col = "black", tl.cex = 1, addCoef.col = "white")
corrplot(cor(dep_bal, method = "spearman"), method = "color", order = "AOE", tl.col = "black", tl.cex = 1, addCoef.col = "white")
corrplot(cor(dep_bal, method = c("spearman","pearson", "kendall"), method = "color", order = "AOE", tl.col = "black", tl.cex = 1, addCoef.col = "white")
corrplot(cor(dep_bal, method = c("spearman","pearson", "kendall")), method = "color", order = "AOE", tl.col = "black", tl.cex = 1, addCoef.col = "white")
corrplot(cor(dep_bal, use="everything", method = c("spearman","pearson", "kendall")), method = "color", order = "AOE", tl.col = "black", tl.cex = 1, addCoef.col = "white")
corrplot(cor(dep_bal, method = "kendall"), method = "color", order = "AOE", tl.col = "black", tl.cex = 1, addCoef.col = "white")
corrplot(cor(dep_bal, method = "kendall"), method = "color", order = "AOE", tl.col = "black", tl.cex = 1, addCoef.col = "white")
corrplot(cor(dep_bal), method = "color", order = "AOE", tl.col = "black", tl.cex = 1, addCoef.col = "white")
corrplot(cor(dep_bal, method = "pearson"), method = "color", order = "AOE", tl.col = "black", tl.cex = 1, addCoef.col = "white")
corrplot(cor(dep_bal, method = "spearman"), method = "color", order = "AOE", tl.col = "black", tl.cex = 1, addCoef.col = "white")
corrplot(cor(dep_bal, method = "kendall"), method = "color", order = "AOE", tl.col = "black", tl.cex = 1, addCoef.col = "white")
corrplot(cor(dep_bal, method = "pearson"), method = "color", order = "FPC", tl.col = "black", tl.cex = 1, addCoef.col = "white")
corrplot(cor(dep_bal, method = "pearson"), method = "color", order = "AOE", tl.col = "black", tl.cex = 1, addCoef.col = "white")
corrplot(cor(dep_bal, method = "spearman"), method = "color", order = "AOE", tl.col = "black", tl.cex = 1, addCoef.col = "white")
corrplot(cor(dep_bal, method = "kendall"), method = "color", order = "AOE", tl.col = "black", tl.cex = 1, addCoef.col = "white")
corrplot(cor(dep_bal, method = "pearson"), method = "square", order = "AOE", tl.col = "black", tl.cex = 1, addCoef.col = "white")
corrplot(cor(dep_bal, method = "pearson"), method = "elipse", order = "AOE", tl.col = "black", tl.cex = 1, addCoef.col = "white")
corrplot(cor(dep_bal, method = "pearson"), method = "ellipse", order = "AOE", tl.col = "black", tl.cex = 1, addCoef.col = "white")
corrplot(cor(dep_bal, method = "pearson"), method = "pie", order = "AOE", tl.col = "black", tl.cex = 1, addCoef.col = "white")
corrplot(cor(dep_bal, method = "pearson"), method = "shade", order = "AOE", tl.col = "black", tl.cex = 1, addCoef.col = "white")
pie
corrplot(cor(dep_bal, method = "pearson"), method = "pie", order = "AOE", tl.col = "black", tl.cex = 1, addCoef.col = "white")
corrplot(cor(dep_bal, method = "pearson"), method = "color", order = "AOE", tl.col = "black", tl.cex = 1, addCoef.col = "white")
knitr::opts_chunk$set(echo = FALSE)
summary(cars)
plot(pressure)
knitr::opts_chunk$set(echo = FALSE)
summary(cars)
---
title: 'Scrum Cycle 05: Working in Python/R'
author: "Code Crusaders"
date: "4/28/2020"
output:
beamer_presentation: default
ioslides_presentation: default
powerpoint_presentation: default
slidy_presentation: default
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = FALSE)
```
## Question 1
---
title: 'Scrum Cycle 05: Working in Python/R'
author: "Code Crusaders"
date: "4/28/2020"
output: powerpoint_presentation
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = FALSE)
```
## R Markdown
This is an R Markdown presentation. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.
When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document.
## Slide with Bullets
- Bullet 1
- Bullet 2
- Bullet 3
## Slide with R Output
```{r cars, echo = TRUE}
summary(cars)
```
## Slide with Plot
```{r pressure}
plot(pressure)
```
rm(list = ls())
op <- options()
# Load Data
# bank.data <- read.csv(file = file.choose(), stringsAsFactors = TRUE, header = TRUE, sep = ",")
bank.data <- read.csv(file = "cohort2020-set-a.csv", stringsAsFactors = TRUE, header = TRUE, sep = ',', na.strings = c("", "NA"))
# Explore Data
View(bank.data)
nrow(bank.data[!complete.cases(bank.data),])
summary(bank.data)
# -----  ---- #
# ----- Fix missing values ----- #
# RefNum
bank.data$RefNum = NULL # no use for reference number
# Age
boxplot(bank.data$age)
hist(bank.data$age)
# Job
#barplot(summary(bank.data$job), las=2) # plot graph to identify outliers or noise
#levels(bank.data$job) <- c(levels(bank.data$job), "other") # add 'other' as possible value
#bank.data$job[is.na(bank.data$job)] <- "other"
bank.data = bank.data[!is.na(bank.data$job),]
summary(bank.data[!is.na(bank.data$job),])
# marital
# Education - primary: 1, secondary: 2, tertiary: 3
levels(bank.data$education)
bank.data$education <- as.integer(as.factor(bank.data$education))
bank.data = bank.data[!is.na(bank.data$education),]
summary(bank.data[!is.na(bank.data$education),])
# Contact
bank.data$contact = NULL # no use for contact feature which was mostly empty
# Housing
# yes - housing_y, no - houing_n
levels(bank.data$housing)
bank.data = bank.data[!is.na(bank.data$housing),] # remove rows with N/A in housing
lst <- bank.data$housing
lvl <- levels(lst)
new_housing = setNames(data.frame(do.call(rbind,lapply(lst, function(x) as.integer(lvl %in% x)) )), c("housing_n", "housing_y"))
View(data.frame(old=bank.data$housing, new=new_housing))
bank.data = cbind(bank.data, new_housing)
# Loan
bank.data = bank.data[!is.na(bank.data$loan),] # remove rows with N/A in loan
lst <- bank.data$loan
lvl <- levels(lst)
new_loan = setNames(data.frame(do.call(rbind,lapply(lst, function(x) as.integer(lvl %in% x)) )), c("loan_n", "loan_y"))
View(data.frame(old=bank.data$loan, new=new_loan))
bank.data = cbind(bank.data, new_loan)
# month
# no missing values
#summary(bank.data$month)
levels(bank.data$month)
#hist(as.numeric(as.factor(bank.data$month)))
bank.data$month <- match(as.factor(bank.data$month), tolower(month.name))
#day
# no missing values
# outliers - dates that do not exist / are not possible Eg Feb 30, 2019
library(lubridate)
#View(bank.data[days_in_month(bank.data$month)  < bank.data$day, c("day", "month")]) # view all noisy dates
bank.data$day[bank.data$day > 28 & bank.data$month == 2] = 28 # fix noisy dates
# Duration
# no missing values
hist(bank.data$duration)
boxplot(bank.data$duration)
# Deposit
# contains outliers and missing values. Outliers were left alone missing values replaced with median
hist(bank.data$deposit)
boxplot(bank.data$deposit)
View(bank.data[bank.data$deposit > 2 * 10 ^ 5,])
length(bank.data$job[bank.data$deposit > 49000 & !is.na(bank.data$deposit)])
bank.data$deposit[is.na(bank.data$deposit)] = median(bank.data$deposit[!is.na(bank.data$deposit)])
# balance
# contains outliers... not sure what to do with them ... left them alone
boxplot(bank.data$balance)
# tried to do some analysis to figure out if the outliers have any meaning or not
# by comparing deposits and balances
#dep_bal = bank.data[bank.data$deposit > 30000, c("deposit", "balance")]
#dep_bal_ratio = (dep_bal$deposit / dep_bal$balance) * 100
#View(dep_bal_ratio)
# END OF MISSING VALUES
nrow(bank.data[!complete.cases(bank.data),])
knitr::opts_chunk$set(echo = FALSE)
View(bank.data[0:10,])
View(bank.data[0:10,])
knitr::opts_chunk$set(echo = FALSE)
View(bank.data[0:10,])
install.packages("papeR")
library(papeR)
install.packages("lubridate")
install.packages(c("knitr", "papeR"))
install.packages(c("knitr", "papeR"))
library(knitr)
library(papeR)
kable(summarize(bank.data))
unlink('markdown_cache', recursive = TRUE)
install.packages("kableExtra")
knitr::opts_chunk$set(
echo = FALSE,
tidy = TRUE,
tidy.opts=list(blank=FALSE, width.cutoff=60,size = 'tiny'))
library(knitr)
library(papeR)
#library(kableExtra)
kable(summary(bank.data)[,0:4])
kable(summarize(bank.data)[,0:5])
kable(summary(bank.data)[,5:-1])
kable(summary(bank.data)[,-0:5])
kable(summary(bank.data)[,-0:-5])
kable(summary(bank.data)[,0:-5])
install.packages("corrplot")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("kableExtra")
kable(head(bank.data)) %>%
kable_styling(bootstrap_options = c("striped", "hover"))
kable(head(bank.data)) %>% kable_styling(bootstrap_options = c("striped", "hover"))
kable(head(bank.data)) %in% kable_styling(bootstrap_options = c("striped", "hover"))
library(dplyr)
library(kintr)
library(kableExtra)
kable(head(bank.data)) %>%
kable_styling(bootstrap_options = c("striped", "hover"))
knitr::opts_chunk$set(
echo = FALSE,
tidy = TRUE,
tidy.opts=list(blank=FALSE, width.cutoff=60,size = 'tiny'))
library(knitr)
library(papeR)
library(kableExtra)
kable(head(bank.data)) %>%
kable_styling(bootstrap_options = c("striped", "hover"))
bank.data <- read.csv(file = "cohort2020-set-a.csv", stringsAsFactors = TRUE, header = TRUE, sep = ',', na.strings = c("", "NA"))
head(table(bank.data$RefNum))
install.packages("prettydoc")
library(prettydoc)
install.packages("magick")
install.packages("magick")
unlink('markdown_cache', recursive = TRUE)
bank.data
class(head(bank.data))
knitr::opts_chunk$set(
echo = FALSE,
tidy = TRUE,
tidy.opts=list(blank=FALSE,size = 'tiny'))
library(knitr)
library(dplyr)
library(papeR)
library(kableExtra)
library(magick)
bank.data <- read.csv(file = "cohort2020-set-a.csv", stringsAsFactors = TRUE, header = TRUE, sep = ',', na.strings = c("", "NA"))
summ
summ = summary(bank.data)
summ
summ$RefNum
knitr::opts_chunk$set(
echo = FALSE,
tidy = FALSE,
tidy.opts=list(blank=FALSE,size = 'tiny'))
library(knitr)
library(dplyr)
library(papeR)
library(kableExtra)
library(magick)
bank.data <- read.csv(file = "cohort2020-set-a.csv", stringsAsFactors = TRUE, header = TRUE, sep = ',', na.strings = c("", "NA"))
#ref.num = data.frame(values=df$RefNum, summary=summ)
t(kable(df$RefNum, col.names = c("RefNum"))) %>%
kable_styling(bootstrap_options = "striped", font_size = 12, full_width = FALSE)
#ref.num = data.frame(values=df$RefNum, summary=summ)
t(kable(df$RefNum, col.names = c("RefNum"))) %>%
kable_styling(bootstrap_options = "striped", font_size = 12, full_width = FALSE)
View(bank.data)
knitr::opts_chunk$set(
echo = FALSE,
eval = TRUE,
tidy = FALSE,
tidy.opts=list(blank=FALSE,size = 'tiny'))
library(knitr)
library(dplyr)
library(papeR)
library(kableExtra)
library(magick)
bank.data <- read.csv(file = "cohort2020-set-a.csv", stringsAsFactors = TRUE, header = TRUE, sep = ',', na.strings = c("", "NA"))
view(t(summary(bank.data$age)))
unlink('markdown_cache', recursive = TRUE)
unlink('markdown_cache', recursive = TRUE)
unlink('markdown_cache', recursive = TRUE)
knitr::opts_chunk$set(
#include = FALSE,
echo = FALSE,
eval = TRUE,
warning = FALSE,
message = FALSE,
fig.height = 3,
fig.width = 4,
tidy = FALSE,
tidy.opts=list(blank=FALSE,size = 'tiny'))
library(knitr)
library(dplyr)
library(papeR)
library(kableExtra)
library(magick)
bank.data <- read.csv(file = "cohort2020-set-a.csv", stringsAsFactors = TRUE, header = TRUE, sep = ',', na.strings = c("", "NA"))
#library(tidyverse)
neg <- bank.data %>% filter(bank.data$balance < 0)
#library(tidyverse)
neg <- bank.data %>% filter(bank.data$balance < 0)
neg = bank.data[bank.data$ba]
unlink('markdown_cache', recursive = TRUE)
#library(tidyverse)
neg <- bank.data %>% filter(bank.data$balance < 0)
View(neg)
#library(tidyverse)
neg <- bank.data %>% filter(bank.data$balance < 0)
#view(neg)
neg <- neg %>% filter(neg$marital == "married")
#view(neg)
percent <- nrow(neg)/nrow(bank.data) *100
View(percent)
